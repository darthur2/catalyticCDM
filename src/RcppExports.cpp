// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_prior_rate
double compute_prior_rate(NumericMatrix sg, NumericVector p, double s_hat, double g_hat, NumericVector p_hat, NumericMatrix R);
RcppExport SEXP _catalyticCDM_compute_prior_rate(SEXP sgSEXP, SEXP pSEXP, SEXP s_hatSEXP, SEXP g_hatSEXP, SEXP p_hatSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sg(sgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type s_hat(s_hatSEXP);
    Rcpp::traits::input_parameter< double >::type g_hat(g_hatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_hat(p_hatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_prior_rate(sg, p, s_hat, g_hat, p_hat, R));
    return rcpp_result_gen;
END_RCPP
}
// compute_z_post_unnorm
NumericMatrix compute_z_post_unnorm(NumericMatrix Y, NumericMatrix R, NumericVector p, NumericMatrix sg);
RcppExport SEXP _catalyticCDM_compute_z_post_unnorm(SEXP YSEXP, SEXP RSEXP, SEXP pSEXP, SEXP sgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sg(sgSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_z_post_unnorm(Y, R, p, sg));
    return rcpp_result_gen;
END_RCPP
}
// row_sums
NumericVector row_sums(NumericMatrix X);
RcppExport SEXP _catalyticCDM_row_sums(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(row_sums(X));
    return rcpp_result_gen;
END_RCPP
}
// sample_one_multinomial
IntegerVector sample_one_multinomial(NumericVector p);
RcppExport SEXP _catalyticCDM_sample_one_multinomial(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_one_multinomial(p));
    return rcpp_result_gen;
END_RCPP
}
// sample_all_multinomial
IntegerMatrix sample_all_multinomial(NumericMatrix P);
RcppExport SEXP _catalyticCDM_sample_all_multinomial(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_all_multinomial(P));
    return rcpp_result_gen;
END_RCPP
}
// compute_dina_probs
NumericMatrix compute_dina_probs(NumericMatrix eta, NumericVector slip, NumericVector guess);
RcppExport SEXP _catalyticCDM_compute_dina_probs(SEXP etaSEXP, SEXP slipSEXP, SEXP guessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type slip(slipSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guess(guessSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dina_probs(eta, slip, guess));
    return rcpp_result_gen;
END_RCPP
}
// sample_dina_data
IntegerMatrix sample_dina_data(NumericMatrix probs);
RcppExport SEXP _catalyticCDM_sample_dina_data(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_dina_data(probs));
    return rcpp_result_gen;
END_RCPP
}
// compute_dina_probs_marginal
NumericMatrix compute_dina_probs_marginal(NumericMatrix Y, NumericMatrix R, NumericVector slip, NumericVector guess, NumericVector p);
RcppExport SEXP _catalyticCDM_compute_dina_probs_marginal(SEXP YSEXP, SEXP RSEXP, SEXP slipSEXP, SEXP guessSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type slip(slipSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guess(guessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dina_probs_marginal(Y, R, slip, guess, p));
    return rcpp_result_gen;
END_RCPP
}
// compute_tau_lp
double compute_tau_lp(double tau, NumericVector p, NumericVector p_hat, NumericVector slip, double s_hat, NumericVector guess, double g_hat, NumericVector pj_hat, double tau_a, double tau_b);
RcppExport SEXP _catalyticCDM_compute_tau_lp(SEXP tauSEXP, SEXP pSEXP, SEXP p_hatSEXP, SEXP slipSEXP, SEXP s_hatSEXP, SEXP guessSEXP, SEXP g_hatSEXP, SEXP pj_hatSEXP, SEXP tau_aSEXP, SEXP tau_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_hat(p_hatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type slip(slipSEXP);
    Rcpp::traits::input_parameter< double >::type s_hat(s_hatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guess(guessSEXP);
    Rcpp::traits::input_parameter< double >::type g_hat(g_hatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pj_hat(pj_hatSEXP);
    Rcpp::traits::input_parameter< double >::type tau_a(tau_aSEXP);
    Rcpp::traits::input_parameter< double >::type tau_b(tau_bSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_tau_lp(tau, p, p_hat, slip, s_hat, guess, g_hat, pj_hat, tau_a, tau_b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_catalyticCDM_compute_prior_rate", (DL_FUNC) &_catalyticCDM_compute_prior_rate, 6},
    {"_catalyticCDM_compute_z_post_unnorm", (DL_FUNC) &_catalyticCDM_compute_z_post_unnorm, 4},
    {"_catalyticCDM_row_sums", (DL_FUNC) &_catalyticCDM_row_sums, 1},
    {"_catalyticCDM_sample_one_multinomial", (DL_FUNC) &_catalyticCDM_sample_one_multinomial, 1},
    {"_catalyticCDM_sample_all_multinomial", (DL_FUNC) &_catalyticCDM_sample_all_multinomial, 1},
    {"_catalyticCDM_compute_dina_probs", (DL_FUNC) &_catalyticCDM_compute_dina_probs, 3},
    {"_catalyticCDM_sample_dina_data", (DL_FUNC) &_catalyticCDM_sample_dina_data, 1},
    {"_catalyticCDM_compute_dina_probs_marginal", (DL_FUNC) &_catalyticCDM_compute_dina_probs_marginal, 5},
    {"_catalyticCDM_compute_tau_lp", (DL_FUNC) &_catalyticCDM_compute_tau_lp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_catalyticCDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
